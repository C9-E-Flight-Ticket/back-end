generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id Int @id @default(autoincrement())
  name String 
  email String
  password String?
  phoneNumber String
  role Role @default(USER)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  deleteAt DateTime?
  Transactions Transaction[]
}

enum Title {
  Mr
  Mrs
}

model Passenger {
  id Int @id @default(autoincrement())
  title Title
  name String
  familyName String?
  dateOfBirth DateTime
  nationality String
  identityNumber String
  issuingCountry String
  validUntil DateTime?
  deleteAt DateTime?
  Tickets Ticket[]
}

enum TerminalCategory {
  Domestic
  International
}

model Airport {
  id Int @id @default(autoincrement())
  name String
  code String
  city String
  terminalName String @default("Terminal 1A")
  terminalCategory TerminalCategory @default(Domestic)
  continent String
  urlImage String
  fileId String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  deleteAt DateTime?
  flightFrom Flight[] @relation("DepartureFlight")
  flightTo Flight[] @relation("ArrivalFlight")
}

model Airline {
  id Int @id @default(autoincrement())
  name String
  code String
  baggage Int @default(20)
  cabinBaggage Int @default(7)
  entertainment String @default("In Flight Entertainment")
  urlImage String
  fileId String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  deleteAt DateTime?
  flights Flight[]
}

model Flight {
  id Int @id @default(autoincrement())
  airlineId Int
  airline Airline @relation(fields: [airlineId], references: [id])
  departureAirportId Int
  departureAirport Airport @relation("DepartureFlight",fields: [departureAirportId], references: [id])
  arrivalAirportId Int
  arrivalAirport Airport @relation("ArrivalFlight",fields: [arrivalAirportId], references: [id])
  flightNumber String
  departureTime DateTime
  arrivalTime DateTime
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  deleteAt DateTime?
  seats Seat[]
}

model Seat {
  id Int @id @default(autoincrement())
  flightId Int
  flight Flight @relation(fields: [flightId], references: [id])
  seatNumber String
  seatClass String
  price Decimal
  available Boolean @default(true)
  deleteAt DateTime?
  tickets Ticket[]
}

enum PassengerCategory {
    Adult
    Child
    Baby
}

model Ticket {
  id Int @id @default(autoincrement())
  transactionId Int
  transaction Transaction @relation(fields: [transactionId], references: [id])
  seatId Int
  seat Seat @relation(fields: [seatId], references: [id])
  passengerId Int
  passenger Passenger @relation(fields: [passengerId], references: [id])
  category PassengerCategory 
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  deleteAt DateTime?
}

enum Status {
  Issued
  Unpaid
  Cancelled
}

model Transaction {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  bookingCode String
  tax Decimal
  totalAmmount Decimal
  paymentMethod String
  status Status
  Tickets Ticket[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  deleteAt DateTime?
}